{"ast":null,"code":"import _classCallCheck from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/austinwong/Desktop/GitHub/browser-file-system/src/Components/Folders.js\";\nimport React, { Component } from 'react';\nimport FolderItem from './FolderItem';\nimport PropTypes from 'prop-types';\nimport values from 'lodash/values';\nimport AddFolder from './AddFolder';\nvar data = {\n  '/a': {\n    path: '/a',\n    type: 'folder',\n    isRoot: true,\n    children: []\n  },\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    children: ['/root/test1', '/root/test2']\n  },\n  '/root/test1': {\n    path: '/root/test1',\n    type: 'folder',\n    children: ['/root/test1/readme.md']\n  },\n  '/root/test1/readme.md': {\n    path: '/root/test1/readme.md',\n    type: 'file',\n    content: 'There is nothing here.'\n  },\n  '/root/test2': {\n    path: '/root/test2',\n    type: 'folder',\n    children: ['/root/test2/pictures', '/root/test2/videos']\n  },\n  '/root/test2/pictures': {\n    path: '/root/test2/picture',\n    type: 'folder',\n    children: ['/root/test2/pictures/vacation']\n  },\n  '/root/test2/pictures/vacation': {\n    path: '/root/brandon/projects/vacation',\n    type: 'folder',\n    children: []\n  },\n  '/root/test2/videos': {\n    path: '/root/test2/videos',\n    type: 'folder',\n    children: []\n  }\n};\n\nvar Folders =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Folders, _Component);\n\n  function Folders(props) {\n    var _this;\n\n    _classCallCheck(this, Folders);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Folders).call(this, props));\n    _this.state = {\n      folderItems: data\n    };\n\n    _this.addFolder = function (title, path, type, children, isRoot) {\n      var newFolder = {\n        title: title,\n        path: path + '/' + title,\n        isRoot: isRoot,\n        type: type,\n        children: children,\n        completed: false\n      };\n      data[newFolder.path] = newFolder;\n\n      _this.setState({\n        state: _this.state\n      }, function () {\n        this.forceUpdate();\n      });\n    };\n\n    _this.renameItem = function (folderItem) {\n      _this.setState();\n    };\n\n    _this.getRootFolderItems = function () {\n      var folderItems = _this.state.folderItems;\n      return values(folderItems).filter(function (folderItem) {\n        return folderItem.isRoot === true;\n      });\n    };\n\n    _this.getChildFolderItems = function (folderItem) {\n      var folderItems = _this.state.folderItems;\n      if (!folderItem.children) return [];\n      return folderItem.children.map(function (path) {\n        return folderItems[path];\n      });\n    };\n\n    _this.onToggle = function (folderItem) {\n      var folderItems = _this.state.folderItems;\n      folderItems[folderItem.path].isOpen = !folderItem.isOpen;\n\n      _this.setState({\n        folderItems: folderItems\n      });\n    };\n\n    _this.onFolderItemSelect = function (folderItem) {\n      var onSelect = _this.props.onSelect;\n      onSelect(folderItem);\n    };\n\n    _this.delItem = function (folderItem) {\n      delete data[folderItem.path];\n\n      for (var key in data) {\n        if (key.includes(folderItem.path)) {\n          delete data[folderItem.path];\n        }\n      }\n\n      _this.setState(data);\n    };\n\n    _this.addFolder = _this.addFolder.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Folders, [{\n    key: \"render\",\n    // render() {\n    //   console.log(this.props.folders)\n    //   return this.props.folders.map((folder) => (\n    //       <FolderItem key={folder.id} folder={folder} \n    //       delFolder={this.props.delFolder}/>\n    //   ));\n    // }\n    value: function render() {\n      var _this2 = this;\n\n      var rootFolderItems = this.getRootFolderItems();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(AddFolder, {\n        addFolder: this.addFolder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), rootFolderItems.map(function (folderItem) {\n        return React.createElement(FolderItem, {\n          folderItem: folderItem,\n          getChildFolderItems: _this2.getChildFolderItems,\n          onToggle: _this2.onToggle,\n          onFolderItemSelect: _this2.onFolderItemSelect,\n          delItem: _this2.delItem,\n          renameItem: _this2.renameItem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Folders;\n}(Component);\n\nFolders.propTypes = {\n  // folders: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired\n};\nexport default Folders;","map":{"version":3,"sources":["/Users/austinwong/Desktop/GitHub/browser-file-system/src/Components/Folders.js"],"names":["React","Component","FolderItem","PropTypes","values","AddFolder","data","path","type","isRoot","children","content","Folders","props","state","folderItems","addFolder","title","newFolder","completed","setState","forceUpdate","renameItem","folderItem","getRootFolderItems","filter","getChildFolderItems","map","onToggle","isOpen","onFolderItemSelect","onSelect","delItem","key","includes","bind","rootFolderItems","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport FolderItem from './FolderItem';\nimport PropTypes from 'prop-types';\nimport values from 'lodash/values'\nimport AddFolder from './AddFolder'\n\nconst data = {\n  '/a': {\n    path: '/a',\n    type: 'folder',\n    isRoot: true,\n    children: []\n  },\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    children: ['/root/test1', '/root/test2'],\n  },\n  '/root/test1': {\n    path: '/root/test1',\n    type: 'folder',\n    children: ['/root/test1/readme.md'],\n  },\n  '/root/test1/readme.md': {\n    path: '/root/test1/readme.md',\n    type: 'file',\n    content: 'There is nothing here.'\n  },\n  '/root/test2': {\n    path: '/root/test2',\n    type: 'folder',\n    children: ['/root/test2/pictures', '/root/test2/videos'],\n  },\n  '/root/test2/pictures': {\n    path: '/root/test2/picture',\n    type: 'folder',\n    children: ['/root/test2/pictures/vacation'],\n  },\n  '/root/test2/pictures/vacation': {\n    path: '/root/brandon/projects/vacation',\n    type: 'folder',\n    children: [],\n  },\n  '/root/test2/videos': {\n    path: '/root/test2/videos',\n    type: 'folder',\n    children: [],\n  },\n};\n\nclass Folders extends Component {\n\n  constructor(props) {\n    super(props);\n    this.addFolder = this.addFolder.bind(this);\n  }\n\n  state = {\n    folderItems: data,\n  };\n\n  // Add Folder\n  addFolder = (title, path, type, children, isRoot) => {\n    const newFolder = {\n      title: title,\n      path: path + '/' + title,\n      isRoot: isRoot,\n      type: type,\n      children: children,\n      completed: false\n    }\n    data[newFolder.path] = newFolder;\n    this.setState({state: this.state}, function (){\n      this.forceUpdate();\n    });\n  }\n\n  renameItem = (folderItem) => {\n    this.setState();\n  }\n\n  // Returns top-level folder\n  getRootFolderItems = () => {\n    const { folderItems } = this.state;\n    return values(folderItems).filter(folderItem => folderItem.isRoot === true);\n  }\n\n  // Returns array of children folders from a folder \n  getChildFolderItems = (folderItem) => {\n    const { folderItems } = this.state;\n    if (!folderItem.children) return [];\n    return folderItem.children.map(path => folderItems[path]);\n  }\n\n  // Toggles whether or not a folder is open or not\n  onToggle = (folderItem) => {\n    const { folderItems } = this.state;\n    folderItems[folderItem.path].isOpen = !folderItem.isOpen;\n    this.setState({ folderItems });\n  }\n\n  // Tracks whether or not a folder item is selected or not\n  onFolderItemSelect = folderItem => {\n    const { onSelect } = this.props;\n    onSelect(folderItem);\n  }\n\n  // Delete Item\n  delItem = (folderItem) => {\n    delete data[folderItem.path];\n    for (var key in data) {\n      if (key.includes(folderItem.path)) {\n        delete data[folderItem.path];\n      }\n    }\n    this.setState(data) ;\n  }\n\n  // render() {\n  //   console.log(this.props.folders)\n  //   return this.props.folders.map((folder) => (\n  //       <FolderItem key={folder.id} folder={folder} \n  //       delFolder={this.props.delFolder}/>\n  //   ));\n  // }\n\n  render() {\n    const rootFolderItems = this.getRootFolderItems();\n    return (\n      <div>\n        <AddFolder addFolder={this.addFolder} />\n        { rootFolderItems.map(folderItem => (\n          <FolderItem\n            folderItem={folderItem}\n            getChildFolderItems={this.getChildFolderItems}\n            onToggle={this.onToggle}\n            onFolderItemSelect={this.onFolderItemSelect}\n            delItem={this.delItem}\n            renameItem={this.renameItem}\n          />\n        ))}\n        \n      </div>\n      \n        \n    )\n  }\n}\n\nFolders.propTypes = {\n  // folders: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\n\n\n\nexport default Folders;\n"]},"metadata":{},"sourceType":"module"}
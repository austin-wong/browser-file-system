{"ast":null,"code":"import _classCallCheck from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/austinwong/Desktop/GitHub/browser-file-system/src/Components/Folders.js\";\nimport React, { Component } from 'react';\nimport FolderItem from './FolderItem';\nimport PropTypes from 'prop-types';\nimport values from 'lodash/values';\n\nvar Folders =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Folders, _Component);\n\n  function Folders() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Folders);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Folders)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      folderItems: data\n    };\n\n    _this.getRootFolderItems = function () {\n      var folderItems = _this.state.folderItems;\n      return values(folderItems).filter(function (folderItem) {\n        return folderItem.isRoot === true;\n      });\n    };\n\n    _this.getChildFolderItems = function (folderItem) {\n      var folderItems = _this.state.folderItems;\n      if (!folderItem.children) return [];\n      return folderItem.children.map(function (path) {\n        return folderItems[path];\n      });\n    };\n\n    _this.onToggle = function (folderItem) {\n      var folderItems = _this.state.folderItems;\n      folderItems[folderItem.path].isOpen = !folderItem.isOpen;\n\n      _this.setState({\n        folderItems: folderItems\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Folders, [{\n    key: \"render\",\n    // render() {\n    //   console.log(this.props.folders)\n    //   return this.props.folders.map((folder) => (\n    //       <FolderItem key={folder.id} folder={folder} \n    //       delFolder={this.props.delFolder}/>\n    //   ));\n    // }\n    value: function render() {\n      var _this2 = this;\n\n      var rootFolderItems = this.getRootFolderItems();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, rootFolderItems.map(function (folderItem) {\n        return React.createElement(FolderItem, {\n          folderItem: folderItem,\n          getChildFolderItems: _this2.getChildFolderItems,\n          onToggle: _this2.onToggle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Folders;\n}(Component); // PropTypes\n\n\nFolders.propTypes = {\n  folders: PropTypes.array.isRequired\n};\nvar data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    children: ['/root/austin', '/root/bob']\n  }\n};\nexport default Folders;","map":{"version":3,"sources":["/Users/austinwong/Desktop/GitHub/browser-file-system/src/Components/Folders.js"],"names":["React","Component","FolderItem","PropTypes","values","Folders","state","folderItems","data","getRootFolderItems","filter","folderItem","isRoot","getChildFolderItems","children","map","path","onToggle","isOpen","setState","rootFolderItems","propTypes","folders","array","isRequired","type"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;IAEMC,O;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,WAAW,EAAEC;AADP,K;;UAKRC,kB,GAAqB,YAAM;AAAA,UACjBF,WADiB,GACD,MAAKD,KADJ,CACjBC,WADiB;AAEzB,aAAOH,MAAM,CAACG,WAAD,CAAN,CAAoBG,MAApB,CAA2B,UAAAC,UAAU;AAAA,eAAIA,UAAU,CAACC,MAAX,KAAsB,IAA1B;AAAA,OAArC,CAAP;AACD,K;;UAGDC,mB,GAAsB,UAACF,UAAD,EAAgB;AAAA,UAC5BJ,WAD4B,GACZ,MAAKD,KADO,CAC5BC,WAD4B;AAEpC,UAAI,CAACI,UAAU,CAACG,QAAhB,EAA0B,OAAO,EAAP;AAC1B,aAAOH,UAAU,CAACG,QAAX,CAAoBC,GAApB,CAAwB,UAAAC,IAAI;AAAA,eAAIT,WAAW,CAACS,IAAD,CAAf;AAAA,OAA5B,CAAP;AACD,K;;UAEDC,Q,GAAW,UAACN,UAAD,EAAgB;AAAA,UACjBJ,WADiB,GACD,MAAKD,KADJ,CACjBC,WADiB;AAEzBA,MAAAA,WAAW,CAACI,UAAU,CAACK,IAAZ,CAAX,CAA6BE,MAA7B,GAAsC,CAACP,UAAU,CAACO,MAAlD;;AACA,YAAKC,QAAL,CAAc;AAAEZ,QAAAA,WAAW,EAAXA;AAAF,OAAd;AACD,K;;;;;;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AAAA;;AACP,UAAMa,eAAe,GAAG,KAAKX,kBAAL,EAAxB;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIW,eAAe,CAACL,GAAhB,CAAoB,UAAAJ,UAAU;AAAA,eAC9B,oBAAC,UAAD;AACE,UAAA,UAAU,EAAEA,UADd;AAEE,UAAA,mBAAmB,EAAE,MAAI,CAACE,mBAF5B;AAGE,UAAA,QAAQ,EAAE,MAAI,CAACI,QAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD8B;AAAA,OAA9B,CADJ,CADF;AAWD;;;;EA7CmBhB,S,GAgDtB;;;AACAI,OAAO,CAACgB,SAAR,GAAoB;AAClBC,EAAAA,OAAO,EAAEnB,SAAS,CAACoB,KAAV,CAAgBC;AADP,CAApB;AAIA,IAAMhB,IAAI,GAAG;AACX,WAAS;AACTQ,IAAAA,IAAI,EAAE,OADG;AAETS,IAAAA,IAAI,EAAE,QAFG;AAGTb,IAAAA,MAAM,EAAE,IAHC;AAITE,IAAAA,QAAQ,EAAE,CAAC,cAAD,EAAiB,WAAjB;AAJD;AADE,CAAb;AASA,eAAeT,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport FolderItem from './FolderItem';\nimport PropTypes from 'prop-types';\nimport values from 'lodash/values'\n\nclass Folders extends Component {\n  state = {\n    folderItems: data,\n  };\n\n  // Returns top-level folder\n  getRootFolderItems = () => {\n    const { folderItems } = this.state;\n    return values(folderItems).filter(folderItem => folderItem.isRoot === true);\n  }\n\n  // Returns array of children folders from a folder \n  getChildFolderItems = (folderItem) => {\n    const { folderItems } = this.state;\n    if (!folderItem.children) return [];\n    return folderItem.children.map(path => folderItems[path]);\n  }\n\n  onToggle = (folderItem) => {\n    const { folderItems } = this.state;\n    folderItems[folderItem.path].isOpen = !folderItem.isOpen;\n    this.setState({ folderItems });\n  }\n\n  // render() {\n  //   console.log(this.props.folders)\n  //   return this.props.folders.map((folder) => (\n  //       <FolderItem key={folder.id} folder={folder} \n  //       delFolder={this.props.delFolder}/>\n  //   ));\n  // }\n\n  render() {\n    const rootFolderItems = this.getRootFolderItems();\n    return (\n      <div>\n        { rootFolderItems.map(folderItem => (\n          <FolderItem\n            folderItem={folderItem}\n            getChildFolderItems={this.getChildFolderItems}\n            onToggle={this.onToggle}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\n// PropTypes\nFolders.propTypes = {\n  folders: PropTypes.array.isRequired\n}\n\nconst data = {\n  '/root': {\n  path: '/root',\n  type: 'folder',\n  isRoot: true,\n  children: ['/root/austin', '/root/bob']\n  }\n}\n\nexport default Folders;\n"]},"metadata":{},"sourceType":"module"}
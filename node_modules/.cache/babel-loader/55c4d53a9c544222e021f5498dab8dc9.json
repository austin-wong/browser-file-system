{"ast":null,"code":"import _classCallCheck from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/austinwong/Desktop/GitHub/browser-file-system/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/austinwong/Desktop/GitHub/browser-file-system/src/Components/Folders.js\";\nimport React, { Component } from 'react';\nimport FolderItem from './FolderItem';\nimport PropTypes from 'prop-types';\nimport values from 'lodash/values';\nvar data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    children: ['/root/austin', '/root/brandon']\n  },\n  '/root/austin': {\n    path: '/root/austin',\n    type: 'folder',\n    children: ['/root/austin/readme.md']\n  },\n  '/root/austin/readme.md': {\n    path: '/root/austin/readme.md',\n    type: 'file',\n    content: 'There is nothing here.'\n  },\n  '/root/brandon': {\n    path: '/root/brandon',\n    type: 'folder',\n    children: ['/root/brandon/projects', '/root/brandon/vblogs']\n  },\n  '/root/brandon/projects': {\n    path: '/root/brandon/projects',\n    type: 'folder',\n    children: ['/root/brandon/projects/treeview']\n  },\n  '/root/brandon/projects/treeview': {\n    path: '/root/brandon/projects/treeview',\n    type: 'folder',\n    children: []\n  },\n  '/root/brandon/vblogs': {\n    path: '/root/brandon/vblogs',\n    type: 'folder',\n    children: []\n  }\n};\n\nvar Folders =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Folders, _Component);\n\n  function Folders() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Folders);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Folders)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      folderItems: data\n    };\n\n    _this.getRootFolderItems = function () {\n      var folderItems = _this.state.folderItems;\n      return values(folderItems).filter(function (folderItem) {\n        return folderItem.isRoot === true;\n      });\n    };\n\n    _this.getChildFolderItems = function (folderItem) {\n      var folderItems = _this.state.folderItems;\n      if (!folderItem.children) return [];\n      return folderItem.children.map(function (path) {\n        return folderItems[path];\n      });\n    };\n\n    _this.onToggle = function (folderItem) {\n      var folderItems = _this.state.folderItems;\n      folderItems[folderItem.path].isOpen = !folderItem.isOpen;\n\n      _this.setState({\n        folderItems: folderItems\n      });\n    };\n\n    _this.onFolderItemSelect = function (folderItem) {\n      var onSelect = _this.props.onSelect;\n      onSelect(folderItem);\n    };\n\n    return _this;\n  }\n\n  _createClass(Folders, [{\n    key: \"render\",\n    // render() {\n    //   console.log(this.props.folders)\n    //   return this.props.folders.map((folder) => (\n    //       <FolderItem key={folder.id} folder={folder} \n    //       delFolder={this.props.delFolder}/>\n    //   ));\n    // }\n    value: function render() {\n      var _this2 = this;\n\n      var rootFolderItems = this.getRootFolderItems();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, rootFolderItems.map(function (folderItem) {\n        return React.createElement(FolderItem, {\n          folderItem: folderItem,\n          getChildFolderItems: _this2.getChildFolderItems,\n          onToggle: _this2.onToggle,\n          onFolderItemSelect: _this2.onFolderItemSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Folders;\n}(Component); // PropTypes\n\n\nFolders.propTypes = {\n  // folders: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired\n};\nexport default Folders;","map":{"version":3,"sources":["/Users/austinwong/Desktop/GitHub/browser-file-system/src/Components/Folders.js"],"names":["React","Component","FolderItem","PropTypes","values","data","path","type","isRoot","children","content","Folders","state","folderItems","getRootFolderItems","filter","folderItem","getChildFolderItems","map","onToggle","isOpen","setState","onFolderItemSelect","onSelect","props","rootFolderItems","propTypes","func","isRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,IAAMC,IAAI,GAAG;AACX,WAAS;AACPC,IAAAA,IAAI,EAAE,OADC;AAEPC,IAAAA,IAAI,EAAE,QAFC;AAGPC,IAAAA,MAAM,EAAE,IAHD;AAIPC,IAAAA,QAAQ,EAAE,CAAC,cAAD,EAAiB,eAAjB;AAJH,GADE;AAOX,kBAAgB;AACdH,IAAAA,IAAI,EAAE,cADQ;AAEdC,IAAAA,IAAI,EAAE,QAFQ;AAGdE,IAAAA,QAAQ,EAAE,CAAC,wBAAD;AAHI,GAPL;AAYX,4BAA0B;AACxBH,IAAAA,IAAI,EAAE,wBADkB;AAExBC,IAAAA,IAAI,EAAE,MAFkB;AAGxBG,IAAAA,OAAO,EAAE;AAHe,GAZf;AAiBX,mBAAiB;AACfJ,IAAAA,IAAI,EAAE,eADS;AAEfC,IAAAA,IAAI,EAAE,QAFS;AAGfE,IAAAA,QAAQ,EAAE,CAAC,wBAAD,EAA2B,sBAA3B;AAHK,GAjBN;AAsBX,4BAA0B;AACxBH,IAAAA,IAAI,EAAE,wBADkB;AAExBC,IAAAA,IAAI,EAAE,QAFkB;AAGxBE,IAAAA,QAAQ,EAAE,CAAC,iCAAD;AAHc,GAtBf;AA2BX,qCAAmC;AACjCH,IAAAA,IAAI,EAAE,iCAD2B;AAEjCC,IAAAA,IAAI,EAAE,QAF2B;AAGjCE,IAAAA,QAAQ,EAAE;AAHuB,GA3BxB;AAgCX,0BAAwB;AACtBH,IAAAA,IAAI,EAAE,sBADgB;AAEtBC,IAAAA,IAAI,EAAE,QAFgB;AAGtBE,IAAAA,QAAQ,EAAE;AAHY;AAhCb,CAAb;;IAuCME,O;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,WAAW,EAAER;AADP,K;;UAKRS,kB,GAAqB,YAAM;AAAA,UACjBD,WADiB,GACD,MAAKD,KADJ,CACjBC,WADiB;AAEzB,aAAOT,MAAM,CAACS,WAAD,CAAN,CAAoBE,MAApB,CAA2B,UAAAC,UAAU;AAAA,eAAIA,UAAU,CAACR,MAAX,KAAsB,IAA1B;AAAA,OAArC,CAAP;AACD,K;;UAGDS,mB,GAAsB,UAACD,UAAD,EAAgB;AAAA,UAC5BH,WAD4B,GACZ,MAAKD,KADO,CAC5BC,WAD4B;AAEpC,UAAI,CAACG,UAAU,CAACP,QAAhB,EAA0B,OAAO,EAAP;AAC1B,aAAOO,UAAU,CAACP,QAAX,CAAoBS,GAApB,CAAwB,UAAAZ,IAAI;AAAA,eAAIO,WAAW,CAACP,IAAD,CAAf;AAAA,OAA5B,CAAP;AACD,K;;UAGDa,Q,GAAW,UAACH,UAAD,EAAgB;AAAA,UACjBH,WADiB,GACD,MAAKD,KADJ,CACjBC,WADiB;AAEzBA,MAAAA,WAAW,CAACG,UAAU,CAACV,IAAZ,CAAX,CAA6Bc,MAA7B,GAAsC,CAACJ,UAAU,CAACI,MAAlD;;AACA,YAAKC,QAAL,CAAc;AAAER,QAAAA,WAAW,EAAXA;AAAF,OAAd;AACD,K;;UAGDS,kB,GAAqB,UAAAN,UAAU,EAAI;AAAA,UACzBO,QADyB,GACZ,MAAKC,KADO,CACzBD,QADyB;AAEjCA,MAAAA,QAAQ,CAACP,UAAD,CAAR;AACD,K;;;;;;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AAAA;;AACP,UAAMS,eAAe,GAAG,KAAKX,kBAAL,EAAxB;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIW,eAAe,CAACP,GAAhB,CAAoB,UAAAF,UAAU;AAAA,eAC9B,oBAAC,UAAD;AACE,UAAA,UAAU,EAAEA,UADd;AAEE,UAAA,mBAAmB,EAAE,MAAI,CAACC,mBAF5B;AAGE,UAAA,QAAQ,EAAE,MAAI,CAACE,QAHjB;AAIE,UAAA,kBAAkB,EAAE,MAAI,CAACG,kBAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD8B;AAAA,OAA9B,CADJ,CADF;AAYD;;;;EArDmBrB,S,GAwDtB;;;AACAU,OAAO,CAACe,SAAR,GAAoB;AAClB;AACAH,EAAAA,QAAQ,EAAEpB,SAAS,CAACwB,IAAV,CAAeC;AAFP,CAApB;AAQA,eAAejB,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport FolderItem from './FolderItem';\nimport PropTypes from 'prop-types';\nimport values from 'lodash/values'\n\nconst data = {\n  '/root': {\n    path: '/root',\n    type: 'folder',\n    isRoot: true,\n    children: ['/root/austin', '/root/brandon'],\n  },\n  '/root/austin': {\n    path: '/root/austin',\n    type: 'folder',\n    children: ['/root/austin/readme.md'],\n  },\n  '/root/austin/readme.md': {\n    path: '/root/austin/readme.md',\n    type: 'file',\n    content: 'There is nothing here.'\n  },\n  '/root/brandon': {\n    path: '/root/brandon',\n    type: 'folder',\n    children: ['/root/brandon/projects', '/root/brandon/vblogs'],\n  },\n  '/root/brandon/projects': {\n    path: '/root/brandon/projects',\n    type: 'folder',\n    children: ['/root/brandon/projects/treeview'],\n  },\n  '/root/brandon/projects/treeview': {\n    path: '/root/brandon/projects/treeview',\n    type: 'folder',\n    children: [],\n  },\n  '/root/brandon/vblogs': {\n    path: '/root/brandon/vblogs',\n    type: 'folder',\n    children: [],\n  },\n};\n\nclass Folders extends Component {\n  state = {\n    folderItems: data,\n  };\n\n  // Returns top-level folder\n  getRootFolderItems = () => {\n    const { folderItems } = this.state;\n    return values(folderItems).filter(folderItem => folderItem.isRoot === true);\n  }\n\n  // Returns array of children folders from a folder \n  getChildFolderItems = (folderItem) => {\n    const { folderItems } = this.state;\n    if (!folderItem.children) return [];\n    return folderItem.children.map(path => folderItems[path]);\n  }\n\n  // Toggles whether or not a folder is open or not\n  onToggle = (folderItem) => {\n    const { folderItems } = this.state;\n    folderItems[folderItem.path].isOpen = !folderItem.isOpen;\n    this.setState({ folderItems });\n  }\n\n  // Tracks whether or not a folder item is selected or not\n  onFolderItemSelect = folderItem => {\n    const { onSelect } = this.props;\n    onSelect(folderItem);\n  }\n\n  // render() {\n  //   console.log(this.props.folders)\n  //   return this.props.folders.map((folder) => (\n  //       <FolderItem key={folder.id} folder={folder} \n  //       delFolder={this.props.delFolder}/>\n  //   ));\n  // }\n\n  render() {\n    const rootFolderItems = this.getRootFolderItems();\n    return (\n      <div>\n        { rootFolderItems.map(folderItem => (\n          <FolderItem\n            folderItem={folderItem}\n            getChildFolderItems={this.getChildFolderItems}\n            onToggle={this.onToggle}\n            onFolderItemSelect={this.onFolderItemSelect}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\n// PropTypes\nFolders.propTypes = {\n  // folders: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n\n\n\n\nexport default Folders;\n"]},"metadata":{},"sourceType":"module"}